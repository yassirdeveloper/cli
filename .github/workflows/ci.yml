name: CI

on:
  push:
    branches: [ main ]

env:
  GO_VERSION: 1.24

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Build
        run: go build -v ./...

      - name: Test
        run: go test -v ./...

  release:
    runs-on: ubuntu-latest
    needs: build
    if: |
      contains(github.event.head_commit.message, '[PATCH_RELEASE]') ||
      contains(github.event.head_commit.message, '[MINOR_RELEASE]') ||
      contains(github.event.head_commit.message, '[MAJOR_RELEASE]')

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get Latest Tag
        id: get_latest_tag
        run: |
          # Ensure the latest tag starts with "v"
          LATEST_TAG=$(git describe --tags --abbrev=0 | sed 's/^v//') # Strip "v" if present
          echo "Latest tag (without v): $LATEST_TAG"
          echo "latest_tag=$LATEST_TAG" >> $GITHUB_ENV

      - name: Determine Release Type
        id: determine_release_type
        run: |
          if [[ "${{ github.event.head_commit.message }}" == *"[MAJOR_RELEASE]"* ]]; then
            echo "release_type=major" >> $GITHUB_ENV
          elif [[ "${{ github.event.head_commit.message }}" == *"[MINOR_RELEASE]"* ]]; then
            echo "release_type=minor" >> $GITHUB_ENV
          else
            echo "release_type=patch" >> $GITHUB_ENV
          fi

      - name: Calculate Next Version
        id: calculate_next_version
        run: |
          IFS='.' read -r MAJOR MINOR PATCH <<< "${{ env.latest_tag }}"
          case "${{ env.release_type }}" in
            major)
              NEXT_MAJOR=$((MAJOR + 1))
              NEW_TAG="v${NEXT_MAJOR}.0.0"
              ;;
            minor)
              NEXT_MINOR=$((MINOR + 1))
              NEW_TAG="v${MAJOR}.${NEXT_MINOR}.0"
              ;;
            patch)
              NEXT_PATCH=$((PATCH + 1))
              NEW_TAG="v${MAJOR}.${MINOR}.${NEXT_PATCH}"
              ;;
          esac
          echo "New tag: $NEW_TAG"
          echo "new_tag=$NEW_TAG" >> $GITHUB_ENV

      - name: Create New Tag
        run: |
          git config --global user.name "${{ secrets.GIT_USERNAME }}"
          git config --global user.email "${{ secrets.GIT_USEREMAIL }}"
          git tag ${{ env.new_tag }}
          git push origin ${{ env.new_tag }}